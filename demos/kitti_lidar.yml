# -----------------------------------------------------------------------------
#                        SLAM system definition for MOLA
# This file defines:
# a 3D LiDAR-SLAM problem, fed from a Kitti dataset.
# -----------------------------------------------------------------------------

modules:
# Setup of SLAM back-end =====================================
  - name: backend
    type: ASLAM_gtsam
    execution_rate: 1 # Rate to update the SLAM solution [Hz]
    #verbosity_level: INFO
    params:
      # true: use iSAM2
      # false: use global levmarquartd
      use_incremental_solver: true
      # ------
      # Select state space representation for KeyFrame poses:
      #state_vector: SE2
      state_vector: SE3
      #state_vector: DynSE2
      #state_vector: DynSE3
      # --- constant velocity model params (see papers) ---
      const_vel_model_std_pos: 1.0  # [m]
      const_vel_model_std_vel: 5.0  # [m/s]
      # ------
      # Save trajectory to file at end? useful for plots, error evaluation,...
      save_trajectory_file_prefix: kitti_result_04
      # ------------------------
# Setup of World Model (the map) =====================================
  - name: map
    type: WorldModel
    #verbosity_level: DEBUG
    params:
      # Age at which map keyframes will be unloaded from memory [s]
      age_to_unload_keyframes: 25.0
# Setup of SLAM front-ends ====================================
  - name: lidar_fe
    type: LidarOdometry3D
    raw_data_source: kitti_input
    raw_sensor_label: lidar
    params:
      # Minimum time (seconds) between scans for being attempted to be
      # aligned. Scans faster than this rate will be just silently ignored.
      min_time_between_scans: 0.01    # [seconds]
      # Minimum Euclidean distance (x,y,z) between keyframes inserted into
      # the map
      min_dist_xyz_between_keyframes: 3   # [meters]
      # Minimum ICP "goodness" (in the range [0,1]) for a new KeyFrame to be accepted
      min_icp_goodness: 0.50       # range [0,1]
      # ditto, for loop-closures attempts to align
      min_icp_goodness_lc: 0.75     # range [0,1]
      # Relative weight of decimated full pc in ICP:
      icp_full_decim_layer_weight: 0.1
      #
      olae_relative_weight_planes_attitude: 0.1
      # Voxel filter: general params
      full_pointcloud_decimation: 10
      voxel_filter_resolution: 1  # [meters]
      voxel_filter_min_point_count: 10 # min. points count/voxel to accept
      voxel_filter_min_point_spacing: 0.02   # [meters]
      # Voxel filer for edges:
      voxel_filter4edges_decimation: 2
      voxel_filter4edges_max_e1_e0: 40
      voxel_filter4edges_min_e2_e1: 1
      # Voxel filter for planes:
      voxel_filter4planes_decimation: 5
      voxel_filter4planes_min_e1_e0: 80
      voxel_filter4planes_min_e2_e0: 80
      #
      # min/max distance to check for match/loop closure between KFs:
      min_dist_to_matching: 3.0       # [m]
      max_dist_to_matching: 30.0      # [m]
      max_dist_to_loop_closure: 30.0  # [m]
      max_nearby_align_checks: 7
      min_topo_dist_to_consider_loopclosure: 40
      # Params for the ICP algoritm: See mrpt::slam::CICP for documentation
      # Case: WITH a good twist (velocity) model:
      icp_params_with_vel.maxIterations:     8      50      10
      icp_params_with_vel.thresholdDist:     1.0     0.75   0.50    # [meters]
      icp_params_with_vel.thresholdAng:      2.0     0.5    0.1   # [deg]
      icp_params_with_vel.useRobustKernel:   0       1      1
      icp_params_with_vel.maxPairsPerLayer:  100     200    5000
      # Case: WITHOUT a good twist (velocity) model:
      icp_params_without_vel.maxIterations:   8      50   10
      icp_params_without_vel.thresholdDist:   3.0    0.75 0.5  # [meters]
      icp_params_without_vel.thresholdAng:    3.0    0.5  0.5 # [deg]
      icp_params_without_vel.useRobustKernel:  0     1     1
      icp_params_without_vel.maxPairsPerLayer: 100   200   5000
      # Case: Loop closure
      loop_closure_montecarlo_samples: 5
      icp_params_loopclosure.maxIterations:   10    40      10
      icp_params_loopclosure.thresholdDist:   30.0   1.0    0.75  # [meters]
      icp_params_loopclosure.thresholdAng:     5.0   1.0    0.5  # [deg]
      icp_params_loopclosure.useRobustKernel:  0     0      0
      icp_params_loopclosure.maxPairsPerLayer:  200  200   5000
      # visualization:
      viz_decor_decimation: 5
      viz_decor_pointsize: 2.0
      # -----------------------------------------------------
      # DEBUG: Save all ICP pairings as 3Dscene files, for visual inspection
      # Warning: this can consume a *huge* disk space
      #debug_save_lidar_odometry: true
      #debug_save_extra_edges: true
      #debug_save_loop_closures: true
# Offline or online sensory data sources =====================
# TODO: Create a YAML !include
  - name: kitti_input
    type: KittiOdometryDataset
    execution_rate: 20 # Hz
    #verbosity_level: INFO
    gui_preview_sensors:
      - raw_sensor_label: lidar
        decimation: 1
        win_pos: 5 5 400 400
      - raw_sensor_label: image_0
        decimation: 1
        win_pos: 5 410 400 130
    params:
      base_dir: ${KITTI_BASE_DIR}
      sequence: 04
      time_warp_scale: 1.2
      publish_lidar: true
      publish_image_0: true
      publish_image_1: false
